<?xml version="1.0" encoding="iso-8859-1"?>
<antlib>

   <taskdef name="wldeploy" 
            classpathref="library.weblogic" 
            classname="weblogic.ant.taskdefs.management.WLDeploy"/>   

   <taskdef name="wlst" 
            classpathref="library.weblogic" 
            classname="weblogic.ant.taskdefs.management.WLSTTask"/>   

   <macrodef name="wlCreateFileStore">
    <attribute name="adminUser"/>
    <attribute name="adminPassword"/>
    <attribute name="adminUrl"/>
    <attribute name="serverTarget"/>
    <attribute name="fileStoreName"/>
    <sequential>
      <wlst classpathref="library.weblogic" 
            failonerror="true" 
            debug="false" 
            arguments="@{adminUser} @{adminPassword} @{adminUrl} @{serverTarget} @{fileStoreName}">
        <script>
            adminUser=sys.argv[0]
            adminPassword=sys.argv[1]
            adminUrl=sys.argv[2]
            serverTarget=sys.argv[3]
            fileStoreName=sys.argv[4]

            connect(adminUser,adminPassword,adminUrl)
            edit()
            startEdit()

            try:
                cd('/')
                cmo.createFileStore(fileStoreName)
                cd('/FileStores/'+fileStoreName)
                set('Targets', jarray.array([ObjectName('com.bea:Name='+serverTarget+',Type=Server')], ObjectName))
                save()
                activate()          
            except:
                print "Unexpected error:", sys.exc_info()[0]
                undo('true','y')
                stopEdit('y')
    </script>
      </wlst>
    </sequential>
   </macrodef>    

   <macrodef name="wlCreateJDBCStore">
    <attribute name="adminUser"/>
    <attribute name="adminPassword"/>
    <attribute name="adminUrl"/>
    <attribute name="serverTarget"/>
    <attribute name="jdbcStoreName"/>
    <attribute name="prefix"/>
    <attribute name="datasource"/>
    <sequential>
      <wlst classpathref="library.weblogic" 
            failonerror="true" 
            debug="false" 
            arguments="@{adminUser} @{adminPassword} @{adminUrl} @{serverTarget} @{jdbcStoreName} @{prefix} @{datasource}">
        <script>
            adminUser=sys.argv[0]
            adminPassword=sys.argv[1]
            adminUrl=sys.argv[2]
            serverTarget=sys.argv[3]
            jdbcStoreName=sys.argv[4]
            prefix=sys.argv[5]
            datasource=sys.argv[6]

            connect(adminUser,adminPassword,adminUrl)
            edit()
            startEdit()

            try:
                cd('/')
                cmo.createJDBCStore(jdbcStoreName)
                cd('/JDBCStores/'+jdbcStoreName)
                cmo.setDataSource(getMBean('/SystemResources/'+datasource))
                cmo.setPrefixName(prefix)
                set('Targets', jarray.array([ObjectName('com.bea:Name='+serverTarget+',Type=Server')], ObjectName))
                save()
                activate()          
            except:
                print "Unexpected error:", sys.exc_info()[0]
                undo('true','y')
                stopEdit('y')
    </script>
      </wlst>
    </sequential>
   </macrodef>    


   <macrodef name="wlCreateJMSServer">
    <attribute name="adminUser"/>
    <attribute name="adminPassword"/>
    <attribute name="adminUrl"/>
    <attribute name="serverTarget"/>
    <attribute name="storeName"/>
    <attribute name="jmsServerName"/>
    <attribute name="storeType"/>
    
    <sequential>
      <wlst classpathref="library.weblogic" 
            failonerror="true" 
            debug="false" 
            arguments="@{adminUser} @{adminPassword} @{adminUrl} @{serverTarget} @{storeName} @{jmsServerName} @{storeType}">
        <script>
            adminUser=sys.argv[0]
            adminPassword=sys.argv[1]
            adminUrl=sys.argv[2]
            serverTarget=sys.argv[3]
            storeName=sys.argv[4]
            jmsServerName=sys.argv[5]
            storeType=sys.argv[6]
                        
            connect(adminUser,adminPassword,adminUrl)
            edit()
            startEdit()

            try:
                cd('/')
                cmo.createJMSServer(jmsServerName)
                cd('/Deployments/'+jmsServerName)
                if storeType == "file":
                    cmo.setPersistentStore(getMBean('/FileStores/'+storeName))
                else:
                    cmo.setPersistentStore(getMBean('/JDBCStores/'+storeName))

                set('Targets', jarray.array([ObjectName('com.bea:Name='+serverTarget+',Type=Server')], ObjectName))

                ## Threshold (values are default)
                # cmo.setBytesThresholdHigh(-1)
                # cmo.setBytesThresholdLow(-1)
                # cmo.setMessagesThresholdHigh(-1)
                # cmo.setMessagesThresholdLow(-1)
                ## Quotas (values are default, except MaxMsgSize set to 10MB)
                # cmo.setBytesMaximum(-1)
                # cmo.setMessagesMaximum(-1)
                # cmo.setBlockingSendPolicy('FIFO')
                cmo.setMaximumMessageSize(10000000)

                save()
                activate()          
            except:
                print "Unexpected error:", sys.exc_info()[0]
                undo('true','y')
                stopEdit('y')
    </script>
      </wlst>
    </sequential>
   </macrodef>       

   <macrodef name="wlCreateJMSModule">
    <attribute name="adminUser"/>
    <attribute name="adminPassword"/>
    <attribute name="adminUrl"/>
    <attribute name="target"/>
    <attribute name="targetType"/>
    <attribute name="jmsModuleName"/>
    <sequential>
      <wlst classpathref="library.weblogic" 
            failonerror="true" 
            debug="false" 
            arguments="@{adminUser} @{adminPassword} @{adminUrl} @{target} @{targetType} @{jmsModuleName}">
        <script>
            adminUser=sys.argv[0]
            adminPassword=sys.argv[1]
            adminUrl=sys.argv[2]
            target=sys.argv[3]
            targetType=sys.argv[4]
            jmsModuleName=sys.argv[5]

            connect(adminUser,adminPassword,adminUrl)
            edit()
            startEdit()

            try:
                cd('/')
                cmo.createJMSSystemResource(jmsModuleName)
                cd('/SystemResources/'+jmsModuleName)
                set('Targets', jarray.array([ObjectName('com.bea:Name='+target+',Type='+targetType)], ObjectName))
        
                save()
                activate()          
            except:
                print "Unexpected error:", sys.exc_info()[0]
                undo('true','y')
                stopEdit('y')
    </script>
      </wlst>
    </sequential>
   </macrodef>       

 
   <macrodef name="wlCreateJMSForeignServer">
    <attribute name="adminUser"/>
    <attribute name="adminPassword"/>
    <attribute name="adminUrl"/>
    <attribute name="jmsModuleName"/>
    <attribute name="subDeployment"/>
    <attribute name="JNDIInitialContextFactory"/>
    <attribute name="JNDIpropertyName"/>
    <attribute name="JNDIpropertyValue"/>
    <attribute name="FSName"/>
    <sequential>
      <wlst classpathref="library.weblogic" 
            failonerror="true" 
            debug="false" 
            arguments="@{adminUser} @{adminPassword} @{adminUrl} @{jmsModuleName} @{subDeployment} @{JNDIInitialContextFactory} @{JNDIpropertyName} @{JNDIpropertyValue} @{FSName}">
        <script>
            adminUser=sys.argv[0]
            adminPassword=sys.argv[1]
            adminUrl=sys.argv[2]
            jmsModuleName=sys.argv[3]
            subDeployment=sys.argv[4]
            JNDIInitialContextFactory=sys.argv[5]
            JNDIpropertyName=sys.argv[6] 
            JNDIpropertyValue=sys.argv[7]
            name=sys.argv[8] 
      
            connect(adminUser,adminPassword,adminUrl)
            edit()
            startEdit()

            try:
                cd('/')
                cd('/SystemResources/'+jmsModuleName)
                cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName)
                cmo.createForeignServer(name)
                cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/ForeignServers/'+name)
                cmo.setDefaultTargetingEnabled(false)
                # cmo.setConnectionURL('some.url')
                cmo.setInitialContextFactory(JNDIInitialContextFactory)
                cmo.setSubDeploymentName(subDeployment)
                cmo.unSet('JNDIPropertiesCredentialEncrypted')
                cmo.createJNDIProperty(JNDIpropertyName)
                cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/ForeignServers/'+name+'/JNDIProperties/'+JNDIpropertyName)
                cmo.setValue(JNDIpropertyValue)

                save()
                activate()          
            except:
                print "Unexpected error:", sys.exc_info()[0]
                undo('true','y')
                stopEdit('y')
    </script>
      </wlst>
    </sequential>
   </macrodef>   

   <macrodef name="wlCreateJMSForeignServerObject">
    <attribute name="adminUser"/>
    <attribute name="adminPassword"/>
    <attribute name="adminUrl"/>
    <attribute name="jmsModuleName"/>
    <attribute name="FSName"/>
    <attribute name="FSType"/>
    <attribute name="objectName"/>
    <attribute name="localJNDI"/>
    <attribute name="remoteJNDI"/>

    <sequential>
      <wlst classpathref="library.weblogic" 
            failonerror="true" 
            debug="false" 
            arguments="@{adminUser} @{adminPassword} @{adminUrl} @{jmsModuleName} @{FSName}  @{FSType} @{objectName} @{localJNDI} @{remoteJNDI}">
        <script>
            adminUser=sys.argv[0]
            adminPassword=sys.argv[1]
            adminUrl=sys.argv[2]
            jmsModuleName=sys.argv[3]
            fsName=sys.argv[4]
            fsType=sys.argv[5]
            objectName=sys.argv[6] 
            localJNDI=sys.argv[7] 
            remoteJNDI=sys.argv[8] 
      
            connect(adminUser,adminPassword,adminUrl)
            edit()
            startEdit()

            try:
                cd('/')
                cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/ForeignServers/'+fsName)
                if fsType == "destination":
                    cmo.createForeignDestination(objectName)
                    cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/ForeignServers/'+fsName+'/ForeignDestinations/'+objectName)
                    cmo.setLocalJNDIName(localJNDI)
                    cmo.setRemoteJNDIName(remoteJNDI)

                cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/ForeignServers/'+fsName)

                if fsType == "cf":
                    cmo.createForeignConnectionFactory(objectName)
                    cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/ForeignServers/'+fsName+'/ForeignConnectionFactories/'+objectName)
                    cmo.setLocalJNDIName(localJNDI)
                    cmo.setRemoteJNDIName(remoteJNDI)
                
                save()
                activate()          
            except:
                print "Unexpected error:", sys.exc_info()[0]
                undo('true','y')
                stopEdit('y')
    </script>
      </wlst>
    </sequential>
   </macrodef>   

   <macrodef name="wlCreateJMSSafAgent">
    <attribute name="adminUser"/>
    <attribute name="adminPassword"/>
    <attribute name="adminUrl"/>
    <attribute name="target"/>
    <attribute name="serviceType"/>
    <attribute name="storeType"/>
    <attribute name="storeName"/>
    <attribute name="safName"/>
    
    <sequential>
      <wlst classpathref="library.weblogic" 
            failonerror="true" 
            debug="false" 
            arguments="@{adminUser} @{adminPassword} @{adminUrl} @{target} @{serviceType} @{storeType} @{storeName} @{safName}">
        <script>
            adminUser=sys.argv[0]
            adminPassword=sys.argv[1]
            adminUrl=sys.argv[2]
            serverTarget=sys.argv[3]
            serviceType=sys.argv[4]
            storeType=sys.argv[5]
            storeName=sys.argv[6]
            safName=sys.argv[7]
                        
            connect(adminUser,adminPassword,adminUrl)
            edit()
            startEdit()

            try:
                cd('/')
                cmo.createSAFAgent(safName)
                cd('/SAFAgents/'+safName)

                if storeType == "file":
                    cmo.setStore(getMBean('/FileStores/'+storeName))
                else:
                    cmo.setStore(getMBean('/JDBCStores/'+storeName))

                set('Targets', jarray.array([ObjectName('com.bea:Name='+serverTarget+',Type=Server')], ObjectName))
                cmo.setServiceType(serviceType)

                save()
                activate()          
            except:
                print "Unexpected error:", sys.exc_info()[0]
                undo('true','y')
                stopEdit('y')
      
    </script>
      </wlst>
    </sequential>
   </macrodef>        
   

   <macrodef name="wlCreateJMSSubdeployment">
    <attribute name="adminUser"/>
    <attribute name="adminPassword"/>
    <attribute name="adminUrl"/>
    <attribute name="target"/>
    <attribute name="subName"/>
    <attribute name="jmsModuleName"/>
    <attribute name="targetType"/>
    
    <sequential>
      <wlst classpathref="library.weblogic" 
            failonerror="true" 
            debug="false" 
            arguments="@{adminUser} @{adminPassword} @{adminUrl} @{target} @{subName} @{jmsModuleName} @{targetType}">
        <script>
            adminUser=sys.argv[0]
            adminPassword=sys.argv[1]
            adminUrl=sys.argv[2]
            target=sys.argv[3]
            subName=sys.argv[4]
            jmsModuleName=sys.argv[5]
            targetType=sys.argv[6]
            
            print "subName: ", subName, "target: ", target, " targetType: ",targetType, " jmsModule: ", jmsModuleName
                        
            connect(adminUser,adminPassword,adminUrl)
            edit()
            startEdit()

            try:
                cd('/')
                cd('/SystemResources/'+jmsModuleName)
                cmo.createSubDeployment(subName)
                cd('/SystemResources/'+jmsModuleName+'/SubDeployments/'+subName)
                set('Targets',jarray.array([ObjectName('com.bea:Name='+target+',Type='+targetType)], ObjectName))

                save()
                activate()          
            except:
                print "Unexpected error:", sys.exc_info()[0]
                undo('true','y')
                stopEdit('y')
      
    </script>
      </wlst>
    </sequential>
   </macrodef>       


   <macrodef name="wlCreateSAFRemoteContext">
    <attribute name="adminUser"/>
    <attribute name="adminPassword"/>
    <attribute name="adminUrl"/>
    <attribute name="jmsModuleName"/>
    <attribute name="desName"/>
    <attribute name="desUsername"/>
    <attribute name="desPassword"/>
    <attribute name="desUrl"/>

    <sequential>
      <wlst classpathref="library.weblogic" 
            failonerror="true" 
            debug="false" 
            arguments="@{adminUser} @{adminPassword} @{adminUrl} @{jmsModuleName} @{desName}  @{desUsername} @{desPassword} @{desUrl}">
        <script>
            adminUser=sys.argv[0]
            adminPassword=sys.argv[1]
            adminUrl=sys.argv[2]
            jmsModuleName=sys.argv[3]
            desName=sys.argv[4]
            desUsername=sys.argv[5]
            desPassword=sys.argv[6] 
            desUrl=sys.argv[7] 
      
            connect(adminUser,adminPassword,adminUrl)
            edit()
            startEdit()

            try:
                cd('/')
                cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName)
                cmo.createSAFRemoteContext(desName)
                
                cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/SAFRemoteContexts/'+desName+'/SAFLoginContext/'+desName)
                cmo.setLoginURL(desUrl)
                if desUsername != "xxxx":
                    cmo.setUsername(desUsername)
                    cmo.setPassword(desPassword)
                
                save()
                activate()          
            except:
                print "Unexpected error:", sys.exc_info()[0]
                undo('true','y')
                stopEdit('y')
    </script>
      </wlst>
    </sequential>
   </macrodef>   

   <macrodef name="wlCreateSAFImportedDestination">
    <attribute name="adminUser"/>
    <attribute name="adminPassword"/>
    <attribute name="adminUrl"/>
    <attribute name="jmsModuleName"/>
    <attribute name="impDesName"/>
    <attribute name="desName"/>
    <attribute name="subDeployment"/>
    <attribute name="jndiPrefix"/>

    <sequential>
      <wlst classpathref="library.weblogic" 
            failonerror="true" 
            debug="false" 
            arguments="@{adminUser} @{adminPassword} @{adminUrl} @{jmsModuleName} @{impDesName}  @{desName} @{subDeployment} @{jndiPrefix}">
        <script>
            adminUser=sys.argv[0]
            adminPassword=sys.argv[1]
            adminUrl=sys.argv[2]
            jmsModuleName=sys.argv[3]
            impDesName=sys.argv[4]
            desName=sys.argv[5]
            subDeployment=sys.argv[6] 
            jndiPrefix=sys.argv[7] 
      
            connect(adminUser,adminPassword,adminUrl)
            edit()
            startEdit()

            try:
                cd('/')
                cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName)
                cmo.createSAFImportedDestinations(impDesName)
                
                cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/SAFImportedDestinations/'+impDesName)
                cmo.setSAFRemoteContext(getMBean('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/SAFRemoteContexts/'+desName))
                cmo.setJNDIPrefix(jndiPrefix)
                cmo.setSAFErrorHandling(None)
                cmo.setTimeToLiveDefault(0)
                cmo.setUseSAFTimeToLiveDefault(false)
                
                cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/SAFImportedDestinations/'+impDesName)
                cmo.setSubDeploymentName(subDeployment)                

                save()
                activate()          
            except:
                print "Unexpected error:", sys.exc_info()[0]
                undo('true','y')
                stopEdit('y')
    </script>
      </wlst>
    </sequential>
   </macrodef>   



   <macrodef name="wlCreateJMSConnectionFactory">
    <attribute name="adminUser"/>
    <attribute name="adminPassword"/>
    <attribute name="adminUrl"/>
    <attribute name="subDeploymentName"/>
    <attribute name="jmsModuleName"/>
    <attribute name="cfName"/>
    <attribute name="cfJNDIName"/>
    <attribute name="transacted"/>
    <attribute name="timeout"/>    
        
    <sequential>
      <wlst classpathref="library.weblogic" 
            failonerror="true" 
            debug="false" 
            arguments="@{adminUser} @{adminPassword} @{adminUrl} @{subDeploymentName} @{jmsModuleName} @{cfName} @{cfJNDIName} @{transacted} @{timeout}">
        <script>
            adminUser=sys.argv[0]
            adminPassword=sys.argv[1]
            adminUrl=sys.argv[2]
            subDeploymentName=sys.argv[3]
            jmsModuleName=sys.argv[4]
            cfName=sys.argv[5]
            cfJNDIName=sys.argv[6]
            transacted=sys.argv[7]
            timeout=sys.argv[8]

            print "subDeploymentName: ", subDeploymentName, " jmsModule: ", jmsModuleName, "cfName: ",cfName , "cfJNDIName: ",cfJNDIName

                        
            connect(adminUser,adminPassword,adminUrl)
            edit()
            startEdit()

            try:
                cd('/')
                cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName)
                cmo.createConnectionFactory(cfName)

                cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/ConnectionFactories/'+cfName+'/SecurityParams/'+cfName)
                cmo.setAttachJMSXUserId(false)

                cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/ConnectionFactories/'+cfName+'/ClientParams/'+cfName)
                cmo.setClientIdPolicy('Restricted')
                cmo.setSubscriptionSharingPolicy('Exclusive')
                cmo.setMessagesMaximum(10)

                cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/ConnectionFactories/'+cfName)
                cmo.setJNDIName(cfJNDIName)
                cmo.setDefaultTargetingEnabled(false)
                cmo.setSubDeploymentName(subDeploymentName)

                if transacted == "true":
                    cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/ConnectionFactories/'+cfName+'/TransactionParams/'+cfName)
                    cmo.setXAConnectionFactoryEnabled(true)
                    cmo.setTransactionTimeout( int(timeout) )

                save()
                activate()          
            except:
                print "Unexpected error:", sys.exc_info()[0]
                undo('true','y')
                stopEdit('y')
      
    </script>
      </wlst>
    </sequential>
   </macrodef>       

   <macrodef name="wlCreateJMSQueueOrTopic">
    <attribute name="adminUser"/>
    <attribute name="adminPassword"/>
    <attribute name="adminUrl"/>
    <attribute name="subDeploymentName"/>
    <attribute name="jmsModuleName"/>
    <attribute name="jmsName"/>
    <attribute name="jmsJNDIName"/>
    <attribute name="jmsType"/>
    <attribute name="distributed"/>    
    <attribute name="balancingPolicy"/>  
    <attribute name="redirect"/>  
    <attribute name="limit"/>  
    <attribute name="policy"/>  
    <attribute name="errorObject"/>  
        
    <sequential>
      <wlst classpathref="library.weblogic" 
            failonerror="true" 
            debug="false" 
            arguments="@{adminUser} @{adminPassword} @{adminUrl} @{subDeploymentName} @{jmsModuleName} @{jmsName} @{jmsJNDIName} @{jmsType} @{distributed} @{balancingPolicy} @{redirect} @{limit} @{policy} @{errorObject}">
        <script>
            adminUser=sys.argv[0]
            adminPassword=sys.argv[1]
            adminUrl=sys.argv[2]
            subDeploymentName=sys.argv[3]
            jmsModuleName=sys.argv[4]
            jmsName=sys.argv[5]
            jmsJNDIName=sys.argv[6]
            jmsType=sys.argv[7]
            distributed=sys.argv[8]
            balancingPolicy=sys.argv[9]
            useRedirect=sys.argv[10]
            limit=sys.argv[11]
            policy=sys.argv[12]
            errorObject=sys.argv[13]
            
            print "subDeploymentName: ", subDeploymentName, " jmsModule: ", jmsModuleName, "Name: ",jmsName , "JNDIName: ",jmsJNDIName

                        
            connect(adminUser,adminPassword,adminUrl)
            edit()
            startEdit()

            try:
                cd('/')
                cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName)
                 
                if jmsType == "queue":
                    if distributed == "true":
                        cmo.createUniformDistributedQueue(jmsName)
                        jmsWlsType = '/UniformDistributedQueues/'
                    else:
                        cmo.createQueue(jmsName)
                        jmsWlsType = '/Queues/'
                if jmsType == "topic":
                    if distributed == "true":
                        cmo.createUniformDistributedTopic(jmsName)
                        jmsWlsType = '/UniformDistributedTopics/'
                    else:
                        cmo.createTopic(jmsName)
                        jmsWlsType = '/Topics/'
                 
                cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+jmsWlsType+jmsName)
                cmo.setJNDIName(jmsJNDIName)
                cmo.setSubDeploymentName(subDeploymentName)

                print "distributed: ",distributed
                if distributed == "true":
                  print "distributed"
                  cmo.setLoadBalancingPolicy(balancingPolicy)

                print "redirect: ",useRedirect
                if useRedirect == "true":
                  print "redirect to ",errorObject
                  cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+jmsWlsType+jmsName+'/DeliveryFailureParams/'+jmsName)
                  cmo.setRedeliveryLimit( int(limit) )
                  cmo.setExpirationPolicy(policy)
                  cmo.setErrorDestination(getMBean('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+jmsWlsType+errorObject))

                save()
                activate()          
            except:
                print "Unexpected error:", sys.exc_info()[0]
                undo('true','y')
                stopEdit('y')
      
         </script>
      </wlst>
    </sequential>
   </macrodef>       


   
   <macrodef name="wlResetDatasource">
    <attribute name="adminUser"/>
    <attribute name="adminPassword"/>
    <attribute name="adminUrl"/>
    <attribute name="serverTarget"/>
    <attribute name="datasourceNames"/>
    <sequential>
      <wlst classpathref="library.weblogic" 
            failonerror="true" 
            debug="false" 
            arguments="@{adminUser} @{adminPassword} @{adminUrl} @{serverTarget} @{datasourceNames}">
        <script>
            adminUser=sys.argv[0]
            adminPassword=sys.argv[1]
            adminUrl=sys.argv[2]
            serverTarget=sys.argv[3]
            datasourceNames=String(sys.argv[4]).split(",")
            connect(adminUser,adminPassword,adminUrl)
            print 'all datasource: '+sys.argv[4]
            domainRuntime()
            for datasourceName in datasourceNames:
             print 'resetting datasource: '+datasourceName
             cd('/')
             cd('ServerRuntimes/'+serverTarget+'/JDBCServiceRuntime/'+serverTarget+'/JDBCDataSourceRuntimeMBeans/'+datasourceName)
             objs = jarray.array([], java.lang.Object)
             strs = jarray.array([], java.lang.String)
             invoke('reset', objs, strs)
        </script>
      </wlst>
    </sequential>
   </macrodef>

   <macrodef name="wlResetAllDatasourcesNotSOA">
    <attribute name="adminUser"/>
    <attribute name="adminPassword"/>
    <attribute name="adminUrl"/>
    <sequential>
      <wlst classpathref="library.weblogic" 
            failonerror="true" 
            debug="false" 
            arguments="@{adminUser} @{adminPassword} @{adminUrl}">
        <script>
            adminUser=sys.argv[0]
            adminPassword=sys.argv[1]
            adminUrl=sys.argv[2]
            connect(adminUser,adminPassword,adminUrl)

            domainRuntime()
            
            drs = ObjectName("com.bea:Name=DomainRuntimeService,Type=weblogic.management.mbeanservers.domainruntime.DomainRuntimeServiceMBean"); 
            servers = mbs.getAttribute(drs, "ServerRuntimes"); 
            for server in servers:
              serverName = mbs.getAttribute(server,'Name')
              print 'server: '+serverName
              if serverName == "AdminServer":
                print 'server skipped'
              else:
                dsBean = ObjectName('com.bea:ServerRuntime='+serverName+',Name='+serverName+',Location='+serverName+',Type=JDBCServiceRuntime')
                if dsBean is None:
                  print 'not found'
                else:
                  datasourceObjects = mbs.getAttribute(dsBean, 'JDBCDataSourceRuntimeMBeans')  
                  for datasourceObject in datasourceObjects:
                    if datasourceObject is None:
                      print 'datasource not found'
                    else:
                      Name = mbs.getAttribute(datasourceObject,'Name')
                      if ( Name.find("SOA",0,3 ) == -1 and Name.find("mds",0,3 ) == -1 and Name.find("EDN",0,3 ) == -1 and Name.find("BAM",0,3 ) == -1 and Name.find("Ora",0,3 ) == -1):  
                        mbs.invoke(datasourceObject, 'reset',None,None)  
                        print 'reset: '+Name
        </script>
      </wlst>
    </sequential>
   </macrodef>


   <macrodef name="wlCreateUsersAndGroup">
    <attribute name="adminUser"/>
    <attribute name="adminPassword"/>
    <attribute name="adminUrl"/>
    <attribute name="defaultPassword"/>
    <attribute name="users"/>
    <attribute name="userGroup"/>
    
    <sequential>
      <wlst classpathref="library.weblogic" 
            failonerror="true" 
            debug="false" 
            arguments="@{adminUser} @{adminPassword} @{adminUrl} @{defaultPassword} @{users} @{userGroup}">
        <script>
            adminUser=sys.argv[0]
            adminPassword=sys.argv[1]
            adminUrl=sys.argv[2]
            connect(adminUser,adminPassword,adminUrl)

            print 'lookup DefaultAuthenticator' 
            
            password = sys.argv[3]
            users=String(sys.argv[4]).split(",")
            
            atnr=cmo.getSecurityConfiguration().getDefaultRealm().lookupAuthenticationProvider('DefaultAuthenticator')
            
            print 'create group'
            group = sys.argv[5]
            atnr.createGroup(group,group)
            
            for user in users:        
              print 'create user: ',user
              atnr.createUser(user,password,user)
              atnr.addMemberToGroup(group,user)
        </script>
      </wlst>
    </sequential>
   </macrodef>

  <macrodef name="wlDatasourceCreate">   
  <attribute name="adminUser"/>   
  <attribute name="adminPassword"/>   
  <attribute name="adminUrl"/>   
  <attribute name="datasourceName"/>
  <attribute name="dsDriverName"/>
  <attribute name="dsUrl"/>
  <attribute name="datasourceTarget"/>
  <attribute name="dsJNDIName"/>
  <attribute name="dsUserName"/>
  <attribute name="dsPassword"/>
  <attribute name="datasourceTargetType"/>

  <sequential>   
    <wlst classpathref="library.weblogic"
          failonerror="true" 
          debug="false" 
          arguments="@{adminUser} @{adminPassword} @{adminUrl} @{datasourceName} @{dsDriverName} @{dsUrl} @{datasourceTarget} @{dsJNDIName} @{dsUserName} @{dsPassword} @{datasourceTargetType}">   
      <script>   
          adminUserName=sys.argv[0]   
          adminPassword=sys.argv[1]   
          adminUrl=sys.argv[2]   
          dsName=sys.argv[3]
          print "datasource " +dsName

          datasourceTargets=String(sys.argv[6]).split(",")
          for datasourceTarget in datasourceTargets:
            print "Datasource Target",datasourceTarget

          dsJNDIName=sys.argv[7]
          print "dsJNDIName " +dsJNDIName

          dsDriverName=sys.argv[4]
          print "dsDriverName " +dsDriverName

          dsURL=sys.argv[5]

          dsUserName=sys.argv[8]
          print "dsUserName " +dsUserName

          dsPassword=sys.argv[9]
          datasourceTargetType=sys.argv[10]

          connect(adminUserName, adminPassword, adminUrl)
          edit()
          startEdit()

          try:
                cd('/')
                cmo.createJDBCSystemResource(dsName)
                cd('/JDBCSystemResources/' + dsName + '/JDBCResource/' + dsName)
                cmo.setName(dsName)

                cd('/JDBCSystemResources/' + dsName + '/JDBCResource/' + dsName + '/JDBCDataSourceParams/' + dsName )
                set('JNDINames',jarray.array([String('jdbc/' + dsName )], String))

                cd('/JDBCSystemResources/' + dsName + '/JDBCResource/' + dsName + '/JDBCDriverParams/' + dsName )
                cmo.setUrl(dsURL)
                cmo.setDriverName( dsDriverName )
                cmo.setPassword(dsPassword)

                cd('/JDBCSystemResources/' + dsName + '/JDBCResource/' + dsName + '/JDBCConnectionPoolParams/' + dsName )
                cmo.setTestTableName('SQL SELECT 1 FROM DUAL')
                cd('/JDBCSystemResources/' + dsName + '/JDBCResource/' + dsName + '/JDBCDriverParams/' + dsName + '/Properties/' + dsName )
                cmo.createProperty('user')

                cd('/JDBCSystemResources/' + dsName + '/JDBCResource/' + dsName + '/JDBCDriverParams/' + dsName + '/Properties/' + dsName + '/Properties/user')
                cmo.setValue(dsUserName)

                cd('/SystemResources/' + dsName )
                targetList = []
                for datasourceTarget in datasourceTargets:
                  targetList.append( ObjectName('com.bea:Name=' + datasourceTarget + ',Type='+datasourceTargetType) )       

                set('Targets',jarray.array(targetList, ObjectName))

                save()
                activate()          

          except:
                print "Unexpected error:", sys.exc_info()[0]
                undo('true','y')
                stopEdit('y')
       </script>   
    </wlst>   
  </sequential>   
 </macrodef>   



</antlib>